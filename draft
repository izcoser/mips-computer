add rd, rs, rt

add $3, $1, $2

Instruction, in binary:
0       $1      $2  $3      0       0x20
000000 00001 00010 00011 00000 100000 = 0x221820
31_26  25_21 20_16 15_11

In the add instruction, Control has to make:
RegDst = 1 (so that $3 is selected as the WriteRegister)
Branch = 0 (no branch in add operation)
MemRead = 0 (not going to read from memory)
MemtoReg = 0 (not going to write memory data into a register)
MemWrite = 0 (not writing in memory)
ALUSrc = 0 (will use value from ReadData2, not from SignExtendOut)
RegWrite = 1 (need to write the result of the operation in $3)
whb = ?
ALUOp = 110 (convention: means it will not be used)

0110000001000001 = 0x6041
----------

sub $3, $1, $2
Instruction:
0	$1	$2	$3	0	0x22
000000	00001	00010	00011	00000	100010 = 0x221822
31_26	25_21	20_16	15_11

RegDst = 1
RegWrite = 1
ALUOp = 110

0110000001000001 = 0x6041

---------------

addi $3, $1, 100
Instruction:
8	$1	$3	100
001000	00001	00011	0000000001100100 = 0x20230064
31_26	25_21	20_16	15_0

RegDest = 0 (in addi, the result is written in 20_16)
ALUSrc = 1
RegWrite = 1
ALUOp = 000 (add)

1100000 = 0x60

-----------------


